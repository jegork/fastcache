# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application CI

on:
  push:
    branches:
      - "*"
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install poetry
      run: pipx install poetry
    - uses: actions/setup-python@v5
      name: Set up Python 3.12
      with:
        python-version: '3.12'
        cache: 'poetry'
    - name: Install dependencies
      run: |
        poetry install
    - name: Run ruff
      run: |
        poetry run ruff check .
        poetry run ruff format --check .
    - name: Test with pytest
      run: |
        poetry run pytest

  build:
    name: "Build distribution"
    needs: check
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-tags: true
    - name: Install poetry
      run: pipx install poetry
    - uses: actions/setup-python@v5
      name: Set up Python 3.12
      with:
        python-version: '3.12'
        cache: 'poetry'
    - name: Install dependencies
      run: poetry install && echo "VERSION=$(poetry version --short)" >> $GITHUB_ENV
    - name: Build
      run: poetry build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Create release
      run: |
        gh release create "v${{ env.VERSION }}" --title "v${{ env.VERSION }}" --generate-notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/ultra-cache
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
